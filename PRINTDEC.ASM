.MODEL SMALL ;EL PROCEDIMIENTO ESTA LISTO (CREO)
.STACK
.DATA
.CODE

TEST_WRITE_DECIMAL PROC
	MOV DX, 12345
	CALL WRITE_DECIMAL
	MOV AX, 4C00H
	INT 21H
TEST_WRITE_DECIMAL ENDP

PUBLIC WRITE_DECIMAL
WRITE_DECIMAL PROC; NEAR dejamos esto pendiente para comer
	PUSH AX
	PUSH CX
	PUSH DX
	PUSH SI
	MOV AX, DX
	MOV SI, 10; ACA SE PONE LA BASE DE LAS CONVERSIONES (SI CREAS OTRO PROCEDIMIENTO CASI IGUAL A ESTE Y LE PONES OTRO NUMERO ESTAS AGREGANDO OTRA BASE)
	COMMENT !
	RECUERDA QUE EL REGISTRO SI (STACK INDEX [INDICE DE PILA]) TIENE 16 BITS POR LO TANTO ESO HARA QUE EL DIVIDENDO IMPLICITO SEA AX 
	!
	XOR CX, CX; ESTO DEJA VACIO CX
NON_ZERO:
	XOR DX, DX; LO MISMO PERO MAS BARATO
	DIV SI; SE USA UN DIVISOR DE 16 BITS
	PUSH DX
	INC CX; ESTA COSA LLEVA LA CUENTA DE LAS DIVISIONES QUE HAS HECHO.
	COMMENT!
	NOTA QUE CUANDO CONVERTIAMOS NUMEROS A OTRAS BASES NUMERICAS NOS DETENIAMOS EN CUANTO EL COCIENTE ERA MENOR QUE LA BASE. EN EL CASO DE UNA COMPUTADORA, ESTA SE 
	DETIENE SOLO HASTA QUE EL COCIENTE ES IGUAL A CERO. ES UNA DIVISION EXTRA PERO ES PARA FACILITARSE LA VIDA Y NO USAR OTRO MOV
	!
	OR AX, AX; ESTA ES UNA MANERA DE COMPROBAR SI AX ES CERO. SI TU HACES A OR A OBTIENES SIEMPRE A (ESO SE EXPLICA EN ALGEBRA BOOLEANA).
	JNZ NON_ZERO; ESTA LINEA TENIA JNE PERO LO CORRECTO ES PONER JNZ DEBIDO A LAS BANDERAS. NECESITAS LA BANDERA NOTZERO.
WRITE_DIGIT_LOOP:
	POP DX
	CALL WRITE_HEX_DIGIT
	LOOP WRITE_DIGIT_LOOP; ESTE LOOP SE VA A EJECUTAR TANTAS VECES COMO DIVISIONES SUCESIVAS SE HAYAN REALIZADO. 
	COMMENT !
	CX LLEVA LA CUENTA DE ESAS DIVISIONES PARA IR RECOGIENDO CADA RESIDUO DE LAS DIVISIONES PARA QUE DESPUES LA COMPU PUEDA ESCRIBIRLO
	!
;END_DECIMAL:
	POP SI
	POP DX
	POP CX
	POP AX
	RET
WRITE_DECIMAL ENDP

WRITE_HEX_DIGIT PROC; ESTE FRAGMENTO LO CONSIGUES EN PRINTHEX.ASM. NO TIENE LA INICIALIZACION DEL REGISTRO DX CON 3F3F PORQUE EN ESTE PROGRAMA TOMARA EL DX COMO ESTE
	PUSH DX
	
	CMP DL, 10
	JAE HEX_LETTER
	ADD DL, "0"; ESTO EQUIVALE A SUMAR 30H A DL
	JMP SHORT WRITE_DIGIT
	HEX_LETTER:
	ADD DL, "A"-10; ESTO EQUIVALE A SUMAR 37H
	COMMENT !
	LAS SUMAS DE 30H Y 37H SIRVEN PARA HACER UN AJUSTE DE LOS CARACTERES ASCII
	!
	WRITE_DIGIT:
	CALL WRITE_CHAR
	
	POP DX
	RET
WRITE_HEX_DIGIT ENDP

PUBLIC WRITE_CHAR
WRITE_CHAR PROC; ESTO ES UNA VIL IMPRESION DE CARACTER DE TODA LA VIDA
	PUSH AX
	MOV AH, 02
	INT 21H
	POP AX
	RET
WRITE_CHAR ENDP; Y PUES YA SERIA TODO
